# 2 класса решение

package home_section001_classes.DynaArrayAdd;


/**
 * #133
 * Практика: Оптимизация методов DynaArray.add
 * Необходимо оптимизировать код методов: add(int[] array) и add(DynaArray dynaArray).
 *
 * Суть оптимизации в следующем: Если будет вызван один из данных методов
 * и передан статический или динамический массив, состоящий например из 75 элементов,
 * то в процессе добавления операция расширения массива с копированием (т.е. операция grow)
 * будет выполнена четыре раза вместо одного:.
 */

import java.util.Arrays;

public class DynaArrayAdd {
    public int[] result = new int[5];

    private int count;

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    /**
     * добавляет все элементы из статичиского массива
     *
     * @param array статичиского массив
     */
    public void add(int[] array) {
        add(array, array.length); // add(с 0 индекса, заканчивая ..length)
    }

    /**
     * добавляет все элементы из динамического массива
     *
     * @param dynaArray динамический массив
     */
    public void add(DynaArrayAdd dynaArray) { // второй объект DynaArrayAdd, первый объект сам класс
            // дин массив класс DynaArrayAdd
        //первый аргумент статич массив dynaArray.result
        //второй аргумент кол-во элементов в этом массиве dynaArray.count
        add(dynaArray.result, dynaArray.count);
    }

    /**
     *  private потомучто метод add будет использоваьтся в данном классе только
     * @param array принмает массив
     * @param length (длина массива) сколько кол-во элементов этого массива нужно скопировать начиная с 0 индекса
     */
    private void add(int[] array, int length) {
        //result.length - count <--- это сколько свободных ячеек в статич массиве result
        // если не моещается то расширяем
        if (result.length - count < length) {
            int[] newArray = new int[count + length];
            System.arraycopy(result, 0, newArray, 0, result.length);
            result = newArray;
        }
        System.arraycopy(array, 0, result, count, length);//из array в result
        count += length; //обновление длины массива
    }

    /**
     * @param value целое число
     */
    public void add(int value) {
        if (count == result.length) {
            int[] newArray = new int[result.length * 2];
            System.arraycopy(result, 0, newArray, 0, result.length);
            result = newArray;
        }
        result[count++] = value;
    }

    public int[] toArray() {
        return Arrays.copyOf(result, count);
    }

    public String asString() {
        final StringBuilder stringBuilder = new StringBuilder().append('[');
        for (int i = 0; i < count; i++) {
            stringBuilder.append(result[i]);
            if (i < count - 1) {
                stringBuilder.append(',').append(' ');
            }
        }
        return stringBuilder.append(']').toString();
    }
}

package home_section001_classes.DynaArrayAdd;


public class DynaArrayAddTest {
    public static void main(String[] args) {
        DynaArrayAdd dynaArray = new DynaArrayAdd();

        dynaArray.add(0);
        dynaArray.add(1);
        dynaArray.add(2);
        dynaArray.add(3);
        dynaArray.add(4);
        dynaArray.add(5);

        dynaArray.add(new int[]{9, 8, 7, 6, 5, 4, 3, 2, 1});

        DynaArrayAdd dynaArray2 = new DynaArrayAdd();
        dynaArray2.add(new int[]{-9, -8, -7, -6, -5, -4, -3, -2, -1, 0});
        dynaArray.add(dynaArray2);

        dynaArray.add(99);
        dynaArray.add(98);
        dynaArray.add(97);

        // [0, 1, 2, 3, 4, 5, 9, 8, 7, 6, 5, 4, 3, 2, 1, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 99, 98, 97]
        System.out.println(dynaArray.asString());

    }
}
