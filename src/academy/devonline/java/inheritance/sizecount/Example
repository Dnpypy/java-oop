#

/*
 * Copyright 2022. http://devonline.academy
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package academy.devonline.java.inheritance.sizecount;

/**
 * @author devonline
 * @link http://devonline.academy/java
 *
 * protected модификатор используется в классах наследниках и внутри текущего класса
 */
public class BaseDataStructure {

    /**
     * сохраняет количество элементов в заданной структуре данных
     */
    protected int count;

    /**
     *
     * @return Возвращает количество элементов в данной структуре данных размер массива целые числа
     */
    public int size() {
        return count;
    }
}

/*
 * Copyright 2022. http://devonline.academy
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package academy.devonline.java.inheritance.sizecount;

import java.util.Arrays;

/**
 * Наследование
 * #214 Устранение проблемы дублирование кода
 *
 * Общее у классов DynaArray, LinkedList это внутренняя переменная count
 * Она имеет одинаковое название, одинаковый тип и одинаковое логическое предназначение
 * count - сохраняет количество элементов в заданной структуре данных
 *
 * Также в этих классах точно такая же реализация метода size
 * Возвращает количество элементов в данной структуре данных
 */
public class DynaArray extends BaseDataStructure{

        private int[] result;
        /**
         * сохраняет количество элементов в заданной структуре данных
         */
        protected int count;
        public DynaArray() {
                this(5);
        }

        public DynaArray(int size) {
                result = new int[size];
        }

        public void add(int value) {
                if (count == result.length) {
                        grow(result.length == 0 ? 5 : result.length * 2);
                }
                result[count++] = value;
        }

        public void add(int[] array) {
                add(array, array.length);
        }

        public void add(DynaArray dynaArray) {
                add(dynaArray.result, dynaArray.count);
        }

        public void add(LinkedList list) {
                add(list.toArray());
        }

        private void add(int[] array, int length) {
                if (result.length - count < length) {
                        grow(count + length);
                }
                System.arraycopy(array, 0, result, count, length);
                count += length;
        }

        private void grow(int newLength) {
                int[] newArray = new int[newLength];
                System.arraycopy(result, 0, newArray, 0, result.length);
                result = newArray;
        }

        public int[] toArray() {
                return Arrays.copyOf(result, count);
        }

        public String asString() {
                final StringBuilder stringBuilder = new StringBuilder().append('[');
                for (int i = 0; i < count; i++) {
                        stringBuilder.append(result[i]);
                        if (i < count - 1) {
                                stringBuilder.append(',').append(' ');
                        }
                }
                return stringBuilder.append(']').toString();
        }

        // базовая функциональность
        public void clear() {
                count = 0;
        }
        /**
         *
         * @return Возвращает количество элементов в данной структуре данных размер массива целые числа
         */
        public int size() {
                return count;
        }
        public boolean remove(int value) {
                int index = indexOf(value);
                if (index != -1) {
                        removeByIndex(index);
                        return true;
                } else {
                        return false;
                }
        }

        private void removeByIndex(int index) {
                if (index < count - 1) {
                        System.arraycopy(result, index + 1, result, index, count - 1 - index);
                }
                count--;
        }

        private int indexOf(int value) {
                for (int i = 0; i < count; i++) {
                        if (result[i] == value) {
                                return i;
                        }
                }
                return -1;
        }

        public boolean contains(int value) {
                return indexOf(value) != -1;
        }
}

/*
 * Copyright 2022. http://devonline.academy
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

package academy.devonline.java.inheritance.sizecount;

/**
 * @author devonline
 * @link http://devonline.academy/java
 * <p>
 *     Наследование
 * класс публичный любой разработчик имеет доступ к этому классу
 * #214 Устранение проблемы дублирование кода
 */


public class LinkedList extends BaseDataStructure{
    private Item first;

    private Item last;
    /**
     * сохраняет количество элементов в заданной структуре данных
     */
    protected int count;
    public void add(int value) {
        Item item = new Item(value);
        if (first == null) {
            first = last = item;
        } else {
            last.next = item;
            last = item;
        }
        count++;
    }

    public void add(int[] array) {
        for (int value : array) {
            add(value);
        }
    }

    public void add(DynaArray dynaArray) {
        add(dynaArray.toArray());
    }
    /**
     *
     * @return Возвращает количество элементов в данной структуре данных размер массива целые числа
     */
    public int size() {
        return count;
    }
    public void add(LinkedList secondList) {
        if (secondList.count > 0) {
            if (first == null) {
                first = secondList.first;
            } else {
                last.next = secondList.first;
            }
            last = secondList.last;
            count += secondList.count;
        }
    }

    public int[] toArray() {
        int[] result = new int[count];
        int index = 0;
        Item current = first;
        while (current != null) {
            result[index++] = current.value;
            current = current.next;
        }
        return result;
    }

    public String asString() {
        StringBuilder builder = new StringBuilder().append('[');
        Item current = first;
        while (current != null) {
            builder.append(current.value);
            if (current.next != null) {
                builder.append(", ");
            }
            current = current.next;
        }
        return builder.append(']').toString();
    }

    public void clear() {
        first = null;
        last = null;
        count = 0;
    }

    public boolean remove(int value) {
        Pair pair = findPair(value);
        if (pair != null) {
            if (pair.current == first && pair.current == last) {
                first = null;
                last = null;
            } else if (pair.current == first) {
                first = pair.current.next;
            } else {
                pair.previous.next = pair.current.next;
                if (pair.current == last) {
                    last = pair.previous;
                }
            }
            count--;
            return true;
        }
        return false;
    }

    private Pair findPair(int value) {
        Item previous = first;
        Item current = first;
        while (current != null) {
            if (current.value == value) {
                return new Pair(previous, current);
            } else {
                previous = current;
                current = current.next;
            }
        }
        return null;
    }

    public boolean contains(int value) {
        return findPair(value) != null;
    }

    /**
     * @author devonline
     * @link http://devonline.academy/java
     */
    private static class Pair {

        private Item previous;

        private Item current;

        private Pair(Item previous, Item current) {
            this.previous = previous;
            this.current = current;
        }
    }

    /**
     * @author devonline
     * @link http://devonline.academy/java
     */
    private static class Item {

        private int value;

        private Item next;

        private Item(int value) {
            this.value = value;
        }
    }
}

